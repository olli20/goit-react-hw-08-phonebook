{"version":3,"file":"static/js/28.652341f3.chunk.js","mappings":"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","sources":["modules/ContactForm/initialState.js","webpack://react-homework-template/./src/modules/ContactForm/contact-form.module.scss?07fc","modules/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/modules/Filter/filter.module.scss?f50b","modules/Filter/Filter.jsx","webpack://react-homework-template/./src/modules/ContactList/contact-list.module.scss?81aa","modules/ContactList/ContactListItem.jsx","modules/ContactList/ContactList.jsx","redux/contacts/contacts-selectors.js","redux/filter/filter-selectors.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["const initialState = {\n    name: \"\",\n    number: \"\",\n}\n\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contact-form_form__f7EO7\",\"inputBlock\":\"contact-form_inputBlock__vNLVg\",\"name\":\"contact-form_name__BfFvo\",\"input\":\"contact-form_input__jaYgM\",\"btn\":\"contact-form_btn__l5W6h\"};","import {useState, useMemo} from 'react';\nimport {nanoid} from \"nanoid\";\nimport PropTypes from 'prop-types';\n\nimport initialState from './initialState';\n\nimport styles from './contact-form.module.scss';\n\nconst ContactForm = ({onSubmit, contacts}) => {\n    const [state, setState] = useState({...initialState});\n\n    const nameInputId = useMemo(()=> nanoid(), []);;\n    const numberInputId = useMemo(()=> nanoid(), []);;\n\n    const handleChange = ({target}) => {\n        const {name, value} = target;\n        setState(prevState => ({...prevState, [name]: value}));\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        const isNameAlreadyHere = contacts.filter(contact => contact.name.toLowerCase() === name.toLowerCase()).length;\n        if(isNameAlreadyHere){\n           return alert(`${name} is already in contacts`);\n        };\n\n        onSubmit({name, number});\n        setState({...initialState});\n    }\n    \n    const {name, number} = state;\n\n    return (\n        <form onSubmit={handleSubmit} className={styles.form}>\n            <div className={styles.inputBlock}>\n                <label htmlFor={nameInputId} className={styles.name}>Name</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    id={nameInputId}\n                    value={name}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    onChange={handleChange}\n                    className={styles.input}\n                />\n            </div>\n            <div className={styles.inputBlock}>\n                <label htmlFor={numberInputId} className={styles.name}>Number</label>\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    id={numberInputId}\n                    value={number}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{0,4}[-.\\s]?\\d{0,4}[-.\\s]?\\d{1,9}\"\n                    // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    onChange={handleChange}\n                    className={styles.input}\n                />\n            </div>\n            <button type=\"submit\" className={styles.btn}>Add contact</button>\n        </form> \n    )\n}\n\nexport default ContactForm;\n\nContactForm.defaultProps = {\n    contacts: [],\n}\n\nContactForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    })).isRequired,\n}\n\n\n// class ContactForm extends Component {\n//     state = {\n//         name: '',\n//         number: '',\n//     };\n\n//     nameInputId = nanoid();\n//     numberInputId = nanoid();\n\n//     handleInputChange = event => {\n//         const {name, value} = event.currentTarget;\n//         this.setState({\n//           [name]: value,\n//         });\n//     }\n\n//     handleFormSubmit = event => {\n//         event.preventDefault();\n//         const {name, number} = this.state;\n//         const {contacts} = this.props;\n\n//         const isNameAlreadyHere = contacts.filter(contact => contact.name.toLowerCase() === name.toLowerCase()).length;\n//         if(isNameAlreadyHere){\n//            return alert(`${name} is already in contacts`);\n//         };\n       \n//         const newContact = {\n//           name: name,\n//           number: number,\n//           id: nanoid(),\n//         };\n\n//         this.props.onSubmit(newContact);\n//         this.reset();\n//     }\n\n//     reset = () => {\n//         this.setState({ name: \"\", number: \"\", });\n//     }\n\n//     render() {\n//         const {name, number} = this.state;\n\n//         return (\n//             <form onSubmit={this.handleFormSubmit} className={styles.form}>\n//                 <div className={styles.inputBlock}>\n//                     <label htmlFor={this.nameInputId} className={styles.name}>Name</label>\n//                     <input\n//                         type=\"text\"\n//                         name=\"name\"\n//                         id={this.nameInputId}\n//                         value={name}\n//                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//                         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//                         required\n//                         onChange={this.handleInputChange}\n//                         className={styles.input}\n//                     />\n//                 </div>\n//                 <div className={styles.inputBlock}>\n//                     <label htmlFor={this.numberInputId} className={styles.name}>Number</label>\n//                     <input\n//                         type=\"tel\"\n//                         name=\"number\"\n//                         id={this.numberInputId}\n//                         value={number}\n//                         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//                         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//                         required\n//                         onChange={this.handleInputChange}\n//                         className={styles.input}\n//                     />\n//                 </div>\n//                 <button type=\"submit\" className={styles.btn}>Add contact</button>\n//             </form> \n//     )}\n// }","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"filter_input__akMgQ\",\"message\":\"filter_message__5V5gU\"};","import {Fragment} from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './filter.module.scss';\n\nconst Filter = ({filter, changeFilter}) => {\n    return (\n        <Fragment>\n            <p className={styles.message}>Find contacts by name</p>\n            <input \n                type=\"text\"\n                value={filter} \n                onChange={changeFilter} \n                className={styles.input}\n            />\n        </Fragment>\n    )\n}\n\nexport default Filter;\n\nFilter.propTypes = {\n    filter: PropTypes.string.isRequired,\n    changeFilter: PropTypes.func.isRequired,\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"contact-list_btn__gWG8c\",\"listItem\":\"contact-list_listItem__Gpmai\"};","import PropTypes from 'prop-types';\n\nimport { HiXMark } from \"react-icons/hi2\";\n\nimport styles from './contact-list.module.scss';\n\nconst ContactListItem = ({id, name, number, onRemoveContact}) => {\n    return (\n        <li className={styles.listItem}>\n            <span>{name}: </span><span>{number}</span>\n            <button onClick={() => onRemoveContact(id)} type=\"button\" className={styles.btn}>\n                <HiXMark />\n            </button>\n        </li>\n    );\n}\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onRemoveContact: PropTypes.func.isRequired,\n}","import PropTypes from 'prop-types';\n\nimport ContactListItem from './ContactListItem';\n\nconst ContactList = ({contacts = [], onRemoveContact}) => {\n    const elements = contacts.map(({id, name, number}) => {\n        return <ContactListItem key={id} id={id} name={name} number={number} onRemoveContact={onRemoveContact}/>;\n    });\n    return (\n\n        <ul>{elements}</ul>\n    );\n}\n\nexport default ContactList;\n\nContactListItem.defaultProps = {\n    contacts: [],\n}\n\nContactListItem.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    })).isRequired,\n    onRemoveContact: PropTypes.func.isRequired,\n}","export const getAllContacts = ({contacts}) => contacts.items;\nexport const getError = ({contacts}) => contacts.error;\nexport const getLoading = ({contacts}) => contacts.loading;\n\nexport const getFilteredContacts = ({contacts, filter}) => {\n    if (!filter) {\n        return contacts.items;\n    }\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.items.filter(({ name }) => {\n        return (name.toLowerCase().includes(normalizedFilter))\n    })\n    return result;\n}","export const getFilter = ({filter}) => filter;","import { Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Navigate } from 'react-router-dom';\n\nimport ContactForm from '../../modules/ContactForm';\nimport Filter from '../../modules/Filter';\nimport ContactList from '../../modules/ContactList';\n\nimport { fetchAllContacts, fetchAddContact, fetchDeleteContact } from '../../redux/contacts/contacts-operations';\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport { getAllContacts, getFilteredContacts, getLoading, getError } from '../../redux/contacts/contacts-selectors';\nimport { getFilter } from '../../redux/filter/filter-selectors';\nimport { getToken } from '../../redux/auth/auth-selectors';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(getAllContacts);\n  const loading = useSelector(getLoading);\n  const error = useSelector(getError);\n  const filteredContacts = useSelector(getFilteredContacts);\n  const filter = useSelector(getFilter);\n  const token = useSelector(getToken);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  if(!token) {\n    return <Navigate to=\"/\" />;\n  }\n\n  const submitHandler = ({ name, number }) => {\n    dispatch(fetchAddContact({ name, number }));\n  };\n\n  const removeHandler = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n\n  const filterHandler = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  const isItems = filteredContacts?.length > 0;\n  \n  return (\n    <Fragment>\n      <ContactForm onSubmit={submitHandler} contacts={contacts} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} changeFilter={filterHandler} />\n      {isItems && <ContactList contacts={filteredContacts} onRemoveContact={removeHandler} />}\n\n      {loading && <p>Loading...</p>}\n      {Boolean(error) && <p>{error}</p>}\n    </Fragment>\n  );\n}\n\nexport default ContactsPage;"],"names":["name","number","ContactForm","onSubmit","contacts","useState","initialState","state","setState","nameInputId","useMemo","nanoid","numberInputId","handleChange","target","value","prevState","event","preventDefault","filter","contact","toLowerCase","length","alert","className","styles","htmlFor","type","id","pattern","title","required","onChange","defaultProps","changeFilter","Fragment","onRemoveContact","onClick","elements","map","ContactListItem","PropTypes","isRequired","getAllContacts","items","getError","error","getLoading","loading","getFilteredContacts","normalizedFilter","includes","getFilter","useSelector","filteredContacts","token","getToken","dispatch","useDispatch","useEffect","fetchAllContacts","to","isItems","fetchAddContact","setFilter","fetchDeleteContact","Boolean"],"sourceRoot":""}